class 1
========
Git
---
- Version control system (VCS)
- Source code management (SCM)
- ope system
- distributed

branching strategy 
commanline

svn -subversion
--
- licenced

git-gub
==========
-  remote repository 

bitbucket
Gerrrit
git-gub

central repository vs distributed repository

===========
download git
install
git --version
git status
create folder 

git init


git config --global user.name "vijayghub"
git config --global user.email "email id"


3 stages
===========
1. Working Area - created file 
2. Stagin area/index area/index - git add <file name>
3. local area - git commit -m "message "
 
git status  - check status
git show - will show the files we have committed to local repository
git show 


git add . - to add multiple files
git commit -m <commit message>


Class 2
==========	
unix/linux command to create files
=====================================
touch file name
touch file1 file2 file3 - create multiple files

cat > file2
..........
.........
ctrl+d

cat file2  - > content of the file

cat >> file1
.......
..........

ctrl+d

vi
--
vi filename

i - to add the data
esc :w - write the file
esc :q - to close the file
esc :wq - write the file and close the file
quit or close the file

esc :q! -force close the file
esc :wq! - write, close the file forecefully


git add file name - move single file
git add .
or
git add *  - to move all the files to staging area/index area

reset
------
move file from local area to staging area => git reset --soft cid
move file from staging area to workspace  => git reset HEAD filename
local area to workspace area              => git reset --mixed cid
                                               oR
											   git reset cid 
delete the files and commit id            => git reset --hard cid

Note: always we need to reset the previous commit id and not the current cid


class3
===============
create github account

clone 

git clone path/of/the/repository

git clone https://github.com/vijayghub/Devops-10.git

cd reponame

ls

touch test1 test2
git add .
git commit -m "message" 

git push


mkdir dir-name --> create directory

cd dir-name

cd ..

delete file
===========
rm filename
git status
git add .
git commit -m " "

delete directory
===============
rm -rf <dir-name> - 
r - recursively
f - forecefully

rename file
=====
mv old-filename new-filename
ls
git status
git add .
git commit 

=============================
class4
======

git clone https://github.com/vijayghub/devops-project1.git
ls
cd devops-project1

touch yourname
git add .
git commit -m " fro xxx "

git push


it will be rejected as you dont have permission

provide access to repository

git push

chages will be moved 

if new changes present in remote repo it reject

git pull

it pop a window then new need to enter esc :wq!

git push

----------------

branch clone of data

git branch

git branch <branch name>
git checkout branch name

git branch
 
git merge branch name

class5
=====

git branch  -d <branch name>  - delete branch

Note: when ever deleting branch make sure you currently not present in that branch

ls -a - show hidden files
ls - list all files
ls -l - long list

git push path/central/repo <branch name> 

git push origin <branch name>

git remote -v - check what is origin

git log
q - come out of all commit

git branch -d branch name - delete branch from local 
git branch -D branch name - force delete the changes  local

git log -5
git log --oneline
git log --oneline -5
git log --author=vijay
git log --author=name of author -3
git log --oneline --since=yyyy-mm-dd
git log --oneline --until=yyyy-mm-dd
git log --oneline --since=yyyy-mm-dd --until=yyyy-mm-dd

git push origin -d <branch-name> - delete the branch from central/remote repository


vi .gitignore
add files you need to ignore to show in git status
esc :wq!

git add .
git commit -m

create file in .gitignore
git status

pull request is raised to merger the changes from develop to master
reviwer will review the code in develop branch and then merge the changes
then after successfull merge delete develop branch

class6
======
master
-----
touch a b

create new branch develop
develop
========
a b 

eidt file a
git add .
git commit

master
-----
edit file a
git add .
git commit


git merge master
- get conflict 

- > two different branche if same files is edite in both the bracnhes then if we try to merge
will get conflict

-> vi filename
- can see conflict markes. so edit or delete then add and commit

git push

comout out of conflict
=================
git merge -- abort


Alias
====
git status
git config --global alias.s "status"
git s
git config --global alias.l2 "log --oneline -2"
git l2

remove alias
============
git config --gobal --unset alias.s
git config --global --unset alias.l2

class7
-------
merge
-----
merge files from one branch to another 
- it will create extr cid for merge


rebase
------

- no extra commit 
- clearly show each branch wise 
- commit history looks neat

amend
--------
touch amd1 amd2 amd3

git add amd1 amd2
git commit -m "msg"

one commit id is created in LA

git add amd3
- add the missing file in single commit 
git commit --amend -m " msg "


git commit --amend -m " msg "

- we are trying to add the all files to single commit id 
- commit id will change for new commit

update commit message
=================
git commit --amend -m " new commit message descriptions with issue id"


to provide lengthy message in different lines
==========================
git add .
git commit -m "line1 " -m "line " -m " line3"

or
git commit -> hit enter
vi editor will open
enter the message
esc :wq!



Class 8
=========

Tagging
---------
- to mark the release point 

git tag  - show tag
git tag <tag name>
git tag

git show tagname  - to show all the commit under the tag
or
git log 

git push origin -d t1 t2 t3 (delete tag from central repo)
git tag -d tagname ( delete tag from local)


what is difference b/w git fetch and git pull
---------------------------------------------
git pull = git fetch + git merge

created file central repo
git fetch
- checked that file data not presetn in  local

git merge origin/master
- > check the file and data  will be present in local
git branch -r  -> show all remote branches
git bracnh -a  -> local and remote branches


cherry-pick
==========
- If we want to copy specific commit to different branch
- we use cherry-pick

master          master1
c1                c1
c2                c2

then
c3
c4git cherry-pick 83dd81df4174716d98ea418a952ebde930a9004d
c4

to copy c3 commit id from master branch to master1 branch
git cherry-pic commit-id
ex: git cherry-pick 83dd81df4174716d98ea418a952ebde930a9004d

